# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, config, ... }:
{
  # sops secrets
  sops.secrets = {
    winapps_password = {};
  };

  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };

  # Enable container name DNS for non-default Podman networks.
  # https://github.com/NixOS/nixpkgs/issues/226365
  networking.firewall.interfaces."podman+".allowedUDPPorts = [ 53 ];

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."WinApps" = {
    image = "ghcr.io/dockur/windows:latest";
    environment = {
      "VERSION" = "tiny11";
      "CPU_CORES" = "4";
      "RAM_SIZE" = "4G";
      "DISK_SIZE" = "64G";
      "HOME" = "/home/lilijoy";
      "USERNAME" = "MyWindowsUser";
      "PASSWORD" = "$cat ${config.sops.secrets.winapps_password.path})";
    };
    volumes = [
      "/home/lilijoy:/shared:rw"
      "/home/lilijoy/Downloads/oem:/oem:rw"
      "winapps_data:/storage:rw"
    ];
    ports = [
      "8006:8006/tcp"
      "3389:3389/tcp"
      "3389:3389/udp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--device=/dev/kvm:/dev/kvm:rwm"
      "--network-alias=windows"
      "--network=winapps_default"
      "--privileged"
    ];
  };
  systemd.services."podman-WinApps" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "on-failure";
    };
    after = [
      "podman-volume-winapps_data.service"
    ];
    requires = [
      "podman-volume-winapps_data.service"
    ];
    partOf = [
      "podman-compose-winapps-root.target"
    ];
    wantedBy = [
      "podman-compose-winapps-root.target"
    ];
  };

  # Volumes
  systemd.services."podman-volume-winapps_data" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      podman volume inspect winapps_data || podman volume create winapps_data
    '';
    partOf = [ "podman-compose-winapps-root.target" ];
    wantedBy = [ "podman-compose-winapps-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-winapps-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
